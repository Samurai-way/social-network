{"version":3,"file":"static/js/593.eadcb072.chunk.js","mappings":"8JACA,GAAgB,QAAU,yBAAyB,WAAa,4BAA4B,KAAO,uB,mBCQtFA,EAAa,SAACC,GACvB,IAAMC,EAAQ,aAAeD,EAAME,GACnC,OACI,gBAAKC,UAAWC,EAAAA,KAAO,UACnB,SAAC,KAAO,CAACD,UAAW,YAAU,SAARE,SAAyBD,EAAAA,WAAeA,EAAAA,IAAM,EAAEE,GAAIL,EAAM,SAAED,EAAMO,QAGpG,ECTaC,EAAc,SAACR,GACxB,OACQ,gBAAKG,UAAWC,EAAAA,QAAU,SAAEJ,EAAMS,SAE9C,E,wCCFaC,EAAa,WAEtB,IAAMC,GAAWC,EAAAA,EAAAA,KAEXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,KAAM,IACRC,SAAU,SAACC,GACT,IAAMC,EAA0B,CAAC,EAIjC,OAHKD,EAAOF,OACRG,EAAOH,KAAO,mCAEXG,CACX,EAAGC,SAAU,SAAAF,GACTP,GAASU,EAAAA,EAAAA,GAAoBH,EAAOF,OACpCH,EAAOS,WACX,IAGJ,OAAO,+BACH,kBAAMF,SAAUP,EAAOU,aAAa,WAChC,4BACI,0BACIC,YAAa,gBACTX,EAAOY,cAAc,UAE5BZ,EAAOM,OAAOH,OAAQ,gBAAKU,MAAO,CAACC,MAAO,OAAO,iDAEtD,0BACI,mBAAQC,WAAYf,EAAOM,OAAOH,KAAMa,KAAM,SAAS,wBAIvE,E,UChCaC,EAAU,WAEnB,IAAMC,GAASC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,MAAM,IAClDI,GAAUH,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMG,eAAeD,OAAO,IAC9DE,GAAWL,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMG,eAAeC,QAAQ,IAEtE,IAAKN,EACD,OAAO,SAAC,KAAQ,CAACzB,GAAI,WAGzB,IAAMgC,EAAeH,EAAQI,KAAI,SAAAnC,GAAC,OAAI,SAACL,EAAU,CAACQ,KAAMH,EAAEG,KAAML,GAAIE,EAAEF,IAAK,IACrEsC,EAAgBH,EAASE,KAAI,SAAAE,GAAC,OAAI,SAACjC,EAAW,CAACC,QAASgC,EAAEhC,SAAU,IAG1E,OACI,iBAAKN,UAAWC,EAAAA,QAAU,WACtB,gBAAKD,UAAWC,EAAAA,YAAc,SACzBkC,KAEL,iBAAKnC,UAAWC,EAAAA,eAAiB,WAC7B,yBAAMoC,KACN,gBAAKrC,UAAWC,EAAAA,KAAO,UAAC,SAACM,EAAU,WAInD,C","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/Form/Form.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__jGLNe\",\"itemActive\":\"Dialogs_itemActive__bCzPN\",\"form\":\"Dialogs_form__P6Ybs\"};","import React from 'react';\r\nimport d from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogsDataType = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogsDataType) => {\r\n    const patch = '/messages/' + props.id\r\n    return (\r\n        <div className={d.item}>\r\n            <NavLink className={({isActive}) => isActive ? d.itemActive : d.item} to={patch}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport d from \"../Dialogs.module.css\";\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nexport const MessageItem = (props: MessageType) => {\r\n    return (\r\n            <div className={d.message}>{props.message}</div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {useAppDispatch} from \"../../../redux/hooks\";\r\nimport {newDialogsMessageAC} from \"../../../redux/dialogs-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    text?: string\r\n}\r\n\r\nexport const DialogForm = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            text: ''\r\n        },validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.text) {\r\n                errors.text = 'sorry, but field can\\'t be empty'\r\n            }\r\n            return errors\r\n        }, onSubmit: values => {\r\n            dispatch(newDialogsMessageAC(values.text))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return <>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <input\r\n                    placeholder={'send text...'}\r\n                    {...formik.getFieldProps('text')}\r\n                />\r\n                {formik.errors.text && <div style={{color: 'red'}}>sorry, but field can't be empty</div>}\r\n            </div>\r\n            <div>\r\n                <button disabled={!!formik.errors.text} type={'submit'}>send</button>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport d from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {MessageItem} from \"./MessageItem/MessageItem\";\r\nimport {DialogForm} from \"./Form/Form\";\r\nimport {useAppSelector} from \"../../redux/hooks\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport const Dialogs = () => {\r\n\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n    const dialogs = useAppSelector(state => state.dialogsReducer.dialogs)\r\n    const messages = useAppSelector(state => state.dialogsReducer.messages)\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    const dialogsItems = dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    const messagesItems = messages.map(m => <MessageItem message={m.message}/>)\r\n\r\n\r\n    return (\r\n        <div className={d.dialogs}>\r\n            <div className={d.dialogItems}>\r\n                {dialogsItems}\r\n            </div>\r\n            <div className={d.dialogMessages}>\r\n                <div>{messagesItems}</div>\r\n                <div className={d.form}><DialogForm/></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n"],"names":["DialogItem","props","patch","id","className","d","isActive","to","name","MessageItem","message","DialogForm","dispatch","useAppDispatch","formik","useFormik","initialValues","text","validate","values","errors","onSubmit","newDialogsMessageAC","resetForm","handleSubmit","placeholder","getFieldProps","style","color","disabled","type","Dialogs","isAuth","useAppSelector","state","auth","dialogs","dialogsReducer","messages","dialogsItems","map","messagesItems","m"],"sourceRoot":""}